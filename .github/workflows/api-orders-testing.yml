name: api orders testing
on:
    push:
        branches: [ "main" , "staging" , "develop", "feature/*"]
    pull_request:
        branches: [ "main" , "staging" , "develop" ]
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ObligatorioDevOps3M/BackendOrdersServiceExample
          ref: ${{ github.ref }}
          path: BackendOrdersServiceExample

      - uses: actions/checkout@v4
        with:
          repository: ObligatorioDevOps3M/BackendProductsServiceExample
          ref: ${{ github.ref }}
          path: BackendProductsServiceExample

      - uses: actions/checkout@v4
        with:
          repository: ObligatorioDevOps3M/BackendPaymentsServiceExample
          ref: ${{ github.ref }}
          path: BackendPaymentsServiceExample

      - uses: actions/checkout@v4
        with:
          repository: ObligatorioDevOps3M/BackendShippingServiceExample
          ref: ${{ github.ref }}
          path: BackendShippingServiceExample

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'corretto'
          cache: maven
      
      - name: Build with Maven
        run: |
          mvn clean package -f ./BackendOrdersServiceExample/pom.xml
          mvn clean package -f ./BackendProductsServiceExample/pom.xml
          mvn clean package -f ./BackendPaymentsServiceExample/pom.xml
          mvn clean package -f ./BackendShippingServiceExample/pom.xml
      
      - name: Copy JARs to build context
        run: |
            cp ./BackendOrdersServiceExample/target/orders-service-example-0.0.1-SNAPSHOT.jar ./BackendOrdersServiceExample
            cp ./BackendProductsServiceExample/target/products-service-example-0.0.1-SNAPSHOT.jar ./BackendProductsServiceExample
            cp ./BackendShippingServiceExample/target/shipping-service-example-0.0.1-SNAPSHOT.jar ./BackendShippingServiceExample
            cp ./BackendPaymentsServiceExample/target/payments-service-example-0.0.1-SNAPSHOT.jar ./BackendPaymentsServiceExample

      - name: Build Docker images
        run: |
          docker build -t orders-service:latest ./BackendOrdersServiceExample -f ./BackendOrdersServiceExample/Dockerfile
          docker build -t products-service:latest ./BackendProductsServiceExample -f ./BackendProductsServiceExample/Dockerfile
          docker build -t shipping-service:latest ./BackendShippingServiceExample -f ./BackendShippingServiceExample/Dockerfile
          docker build -t payments-service:latest ./BackendPaymentsServiceExample -f ./BackendPaymentsServiceExample/Dockerfile
          
      - name: List Docker images
        run: echo "$(docker images)" 
      - name: Create Docker network
        run: docker network create mi-red
      
      - name: Wait for services to start
        run: sleep 30
      
      - name: Check running containers
        run: docker ps -a
      
      - name: Run Docker containers
        run: |
          docker run --name products-service --network mi-red -d products-service:latest
          docker run --name payments-service --network mi-red -d payments-service:latest
          docker run --name shipping-service --network mi-red -d shipping-service:latest
          docker run --name orders-service --network mi-red -d -p 8081:8081 orders-service:latest
      - name: Get ports
        id: get_ports
        run: |
          echo "::set-output name=products_port::$(docker port products-service 8080/tcp | cut -d':' -f2)"
          echo "::set-output name=payments_port::$(docker port payments-service 8083/tcp | cut -d':' -f2)"
          echo "::set-output name=shipping_port::$(docker port shipping-service 8084/tcp | cut -d':' -f2)"
      # - name: Wait for services to start
      #   run: sleep 30
      
      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '20'
      
      # - name: Install Newman
      #   run: npm install -g newman
      
      # - name: Run integration tests with Newman
      #   run: |
      #     newman run ./src/test/API_Orders.postman_collection.json
      #       --reporters cli \ #Para ver la salida en el log del workflow
      #       --reporters cli \
              # --env-var orders_url=http://localhost:8081/orders \
              # --env-var products_url=http://products-service:${{steps.get_ports.outputs.products_port}}/products \
              # --env-var payments_url=http://payments-service:${{steps.get_ports.outputs.payments_port}}/payments \
              # --env-var shipping_url=http://shipping-service:${{steps.get_ports.outputs.shipping_port}}/shipping

      # - name: Stop and remove containers
      #   if: always()
      #   run: |
      #     docker stop orders-service products-service payments-service shipping-service
      #     docker rm orders-service products-service payments-service shipping-service
      #     docker network rm mi-red